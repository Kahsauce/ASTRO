import sys
import os
import importlib.util
from fastapi import APIRouter

sys.path.append("/mnt/user/ASTRO/")  # ‚úÖ Ajout du chemin correct

router = APIRouter()

MODULES_PATH = "/mnt/ASTRO/modules"
SPECIAL_MODULES = ["/mnt/ASTRO/backend/routes/chat.py"]  # üìå Liste des modules sp√©cifiques √† inclure

# ‚úÖ Assurez-vous que tout est bien indent√© √† l'int√©rieur de la fonction load_modules()
def load_modules():
    """ Charge dynamiquement tous les modules trouv√©s dans le dossier /modules et les modules sp√©ciaux """
    loaded_modules = []

    if not os.path.exists(MODULES_PATH):
        print(f"‚ùå Le dossier des modules {MODULES_PATH} n'existe pas.")
        return []

    # üìå Charger tous les modules depuis `/modules`
    for module_name in os.listdir(MODULES_PATH):
        module_path = os.path.join(MODULES_PATH, module_name, f"{module_name}.py")

        if os.path.exists(module_path):
            spec = importlib.util.spec_from_file_location(module_name, module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)

            if hasattr(module, "router"):
                router.include_router(module.router, prefix=f"/{module_name}")  # ‚úÖ Ajout du module √† l'API
                loaded_modules.append(module_name)
                print(f"‚úÖ Module {module_name} charg√© avec succ√®s !")
            else:
                print(f"‚ö†Ô∏è Module {module_name} ignor√© (pas de router d√©tect√©).")

    # üìå Charger aussi `chat.py` (et autres modules sp√©ciaux)
    for special_module in SPECIAL_MODULES:
        if os.path.exists(special_module):
            module_name = os.path.basename(special_module).replace(".py", "")
            spec = importlib.util.spec_from_file_location(module_name, special_module)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)

            print(f"üîç V√©rification du module {module_name}: {module}")

            if hasattr(module, "router"):
                print(f"‚úÖ Le module {module_name} a bien un routeur FastAPI !")
                router.include_router(module.router, prefix=f"/{module_name}")  # ‚úÖ Ajout automatique
                print(f"üöÄ Route ajout√©e dynamiquement : /{module_name}")  # ‚úÖ Log pour v√©rification
                loaded_modules.append(module_name)
                print(f"‚úÖ Module sp√©cial {module_name} charg√© avec succ√®s !")
            else:
                print(f"‚ö†Ô∏è Le module {module_name} N'A PAS de routeur FastAPI. Il sera ignor√©.")

    return loaded_modules  # ‚úÖ Bien indent√© √† l'int√©rieur de `load_modules()`

# üìå Charger les modules au d√©marrage
load_modules()
